buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.1.+'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'net.covers1624.signing' version '1.1.4'
}

apply plugin: 'net.minecraftforge.gradle'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

//def signProps = [:]
//if (System.getenv('KEY_STORE')) {
//    println 'Using Env variables for jar signing.'
//    signProps['keyStore'] = System.getenv('KEY_STORE')
//    file(System.getenv('KEY_STORE_PROPS')).withReader {
//        def props = new Properties()
//        props.load(it)
//        signProps.putAll(props)
//    }
//} else if (project.hasProperty('keyStore')) {
//    println 'Using Project properties for jar signing.'
//    signProps['keyStore'] = project.getProperty('keyStore')
//    signProps['storePass'] = project.getProperty('keyStorePass')
//    signProps['alias'] = project.getProperty('keyStoreAlias')
//    signProps['keyPass'] = project.getProperty('keyStoreKeyPass')
//} else {
//    println 'No signing secrets found, build will not be signed.'
//}

version = '1.0'
group = 'com.teamcofh'
archivesBaseName = 'modid'

repositories {
    mavenLocal()
    maven {
        url 'https://maven.covers1624.net/'
    }
    maven { // TOP
        url 'https://maven.tterrag.com/'
    }
    maven { // JEI
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven { // Patchouli
        url 'https://maven.blamejared.com'
    }
}

minecraft {
    mappings channel: 'snapshot', version: "${mcp_mappings}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // property 'forge.logging.console.level', 'debug'

            property 'mixin.env.disableRefMap', 'true'

            mods {
                CoFHCore {
                    source project(':CoFHCore').sourceSets.main
                }

                ArchersParadox {
                    source project(':ArchersParadox').sourceSets.main
                }
                Ensorcellation {
                    source project(':Ensorcellation').sourceSets.main
                }
                OMGourd {
                    source project(':OMGourd').sourceSets.main
                }
                RedstoneArsenal {
                    source project(':RedstoneArsenal').sourceSets.main
                }

                ThermalCore {
                    source project(':ThermalCore').sourceSets.main
                }

//                ThermalAtomics {
//                    source project(':ThermalAtomics').sourceSets.main
//                }
                ThermalCultivation {
                    source project(':ThermalCultivation').sourceSets.main
                }
                ThermalDynamics {
                    source project(':ThermalDynamics').sourceSets.main
                }
                ThermalExpansion {
                    source project(':ThermalExpansion').sourceSets.main
                }
                ThermalHorizons {
                    source project(':ThermalHorizons').sourceSets.main
                }
                ThermalInnovation {
                    source project(':ThermalInnovation').sourceSets.main
                }
                ThermalLocomotion {
                    source project(':ThermalLocomotion').sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // property 'forge.logging.console.level', 'debug'

            property 'mixin.env.disableRefMap', 'true'

            mods {
                CoFHCore {
                    source project(':CoFHCore').sourceSets.main
                }

                ArchersParadox {
                    source project(':ArchersParadox').sourceSets.main
                }
                Ensorcellation {
                    source project(':Ensorcellation').sourceSets.main
                }
                OMGourd {
                    source project(':OMGourd').sourceSets.main
                }
                RedstoneArsenal {
                    source project(':RedstoneArsenal').sourceSets.main
                }

                ThermalCore {
                    source project(':ThermalCore').sourceSets.main
                }

//                ThermalAtomics {
//                    source project(':ThermalAtomics').sourceSets.main
//                }
                ThermalCultivation {
                    source project(':ThermalCultivation').sourceSets.main
                }
                ThermalDynamics {
                    source project(':ThermalDynamics').sourceSets.main
                }
                ThermalExpansion {
                    source project(':ThermalExpansion').sourceSets.main
                }
                ThermalHorizons {
                    source project(':ThermalHorizons').sourceSets.main
                }
                ThermalInnovation {
                    source project(':ThermalInnovation').sourceSets.main
                }
                ThermalLocomotion {
                    source project(':ThermalLocomotion').sourceSets.main
                }
            }
        }
    }
}

dependencies {

    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
//     runtimeOnly fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${mc_version}-${ie_version}")

    compile project(':CoFHCore')

    compile project(':ArchersParadox')
    compile project(':Ensorcellation')
    compile project(':OMGourd')
    compile project(':RedstoneArsenal')

    compile project(':ThermalCore')
    
//    compile project(':ThermalAtomics')
    compile project(':ThermalCultivation')
    compile project(':ThermalDynamics')
    compile project(':ThermalExpansion')
    compile project(':ThermalHorizons')
    compile project(':ThermalInnovation')
    compile project(':ThermalLocomotion')
}

//signing {
//    if (!signProps.isEmpty()) {
//        jars {
//            sign jar
//            after 'reobfJar'
//
//            keyStore = signProps.keyStore
//            alias = signProps.alias
//            storePass = signProps.storePass
//            keyPass = signProps.keyPass
//        }
//    }
//}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "examplemod",
                "Specification-Vendor"    : "examplemodsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
